import{J as U,r as c,u as m,K as l}from"./index-DTzO7a71.js";const b=U("users",()=>{const f=c([]),v=c([]),a=c(!1),o=c(null),i=m();async function u(){a.value=!0,o.value=null;try{const e=await l.get("/users",{debug:!0});f.value=e}catch(e){console.error("Error al obtener usuarios:",e),o.value=e.message}finally{a.value=!1}}async function d(e){a.value=!0,o.value=null;try{console.log(`Obteniendo usuario con ID ${e}`);const r=await l.get(`/users/${e}`,{debug:!0});return console.log("Datos de usuario recibidos:",r),r}catch(r){return console.error(`Error al obtener usuario con ID ${e}:`,r),o.value=r.message,null}finally{a.value=!1}}async function g(e){a.value=!0,o.value=null;try{const r=await l.post("/auth/register",e);return await i.createActivityLog("CREATE_USER",`Usuario "${r.username}" creado`),await u(),r}catch(r){throw console.error("Error al crear usuario:",r),o.value=r.message,r}finally{a.value=!1}}async function y(e,r){a.value=!0,o.value=null;try{console.log(`Actualizando usuario con ID ${e}`,r);const s={fullName:r.fullName,email:r.email,status:r.status!==void 0?r.status:!0,roleId:r.roleId};r.password&&(s.password=r.password),console.log("Datos enviados para actualización:",JSON.stringify(s));let t;try{t=await l.put(`/users/${e}`,s,{debug:!0}),console.log("Usuario actualizado (desde respuesta):",t)}catch(n){console.error("Error al actualizar usuario a través de API:",n),console.log("Obteniendo datos actualizados del usuario...");try{t=await d(e),console.log("Usuario actualizado (desde fetchUserById):",t)}catch(h){throw console.error("Error al obtener usuario actualizado:",h),t={id:e,...s},n}}await i.createActivityLog("UPDATE_USER",`Usuario "${t.username}" actualizado`);try{await u()}catch(n){console.error("Error al refrescar la lista de usuarios:",n)}return t}catch(s){const t=s.message||"Error desconocido al actualizar el usuario";throw console.error(`Error al actualizar usuario con ID ${e}:`,t),o.value=t,s}finally{a.value=!1}}async function w(e){a.value=!0,o.value=null;try{const r=await d(e);return await l.delete(`/users/${e}`),await i.createActivityLog("DELETE_USER",`Usuario "${r.username}" eliminado`),await u(),!0}catch(r){throw console.error(`Error al eliminar usuario con ID ${e}:`,r),o.value=r.message,r}finally{a.value=!1}}async function E(){a.value=!0,o.value=null;try{console.log("Obteniendo roles");const e=await l.get("/roles",{debug:!0});return v.value=e,e}catch(e){throw console.error("Error al obtener roles:",e),o.value=e.message,e}finally{a.value=!1}}return{users:f,roles:v,loading:a,error:o,fetchUsers:u,fetchUserById:d,createUser:g,updateUser:y,deleteUser:w,fetchRoles:E}});export{b as u};
